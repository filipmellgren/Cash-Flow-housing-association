#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Sep 15 14:32:01 2018

@author: filip
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
os.chdir("/Volumes/GoogleDrive/Min enhet/Boende/Ekonomi/Kassa")

bank_data = pd.read_csv("Raw data, Nordea - Blad1.tsv", sep = "\t")
bank_data.dtypes

# Start with making the "DATUM" column into a date column and set the index:
bank_data["DATUM:"].head()
bank_data["DATUM:"] = pd.to_datetime(bank_data["DATUM:"], 
  format="%Y-%m-%d", utc=True)
bank_data = bank_data.set_index("DATUM:")

# Make "BELOPP:" a column of integers.
bank_data["transaction"] = bank_data["BELOPP:"].str.split(",").str[0]
bank_data["transaction"] = bank_data["transaction"].str.replace(".", "")
# NOTE: this command seem to convert small values (<1000) into nan
bank_data["transaction"] = pd.to_numeric(bank_data["transaction"], errors='coerce')

# The column SALDO: includes weird data, but we can infer its values from previous column
initial_sum = 980264 - bank_data["transaction"].iloc[-2]
bank_data["balance"] = bank_data["transaction"][::-1].cumsum()[::-1] + initial_sum

# Write the cleaned data to file
#bank_data.to_csv("Nordea_nov17.csv")

# Evolvement over time
with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    ax.set_ylim(0,1500000)
    plt.xticks(rotation = 90)
    plt.title("Balance")
    ax.plot(bank_data["balance"])

# From here on, I investigate the expenses where I have a longer time series:
expenses = pd.read_csv("Leverantörsreskontra_2018-09-18.csv", sep = ";")
expenses.dtypes

# Let "Förf.datum" be the time index.
expenses["Förf.datum"].head()
expenses["Förf.datum"] = pd.to_datetime(expenses["Förf.datum"],
        format = "%Y-%m-%d", utc = True)
expenses = expenses.set_index("Förf.datum")

# Declare "Betalt belopp" an integer.
expenses["Betalt_belopp"] = expenses["Betalt belopp"].str.replace("\s","")
expenses["Betalt_belopp"] = pd.to_numeric(expenses["Betalt_belopp"], errors = "coerce")

# We only want to consider running expenses, that is, not investments.
plt.hist(expenses["Betalt_belopp"].dropna(), 30, density=True)
# Let's drop values exceeding 100 000, heating is sometimes 80 000
investment_threshold = 100000
expenses = expenses[expenses.Betalt_belopp < investment_threshold]

# We are mostly interested in how our balance change on a monthly basis,
    # so we redefine our data set into a set of monthly data only by taking
    # the sum of expenses each month.
monthly_expenses = expenses["Betalt_belopp"].resample("M").sum()
# Drop some outlier months (including coming month with expense = 0)
monthly_expenses = monthly_expenses[monthly_expenses > 30000]

avg_monthly_expenses_by_year = monthly_expenses.resample("Y").sum()/12

with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    plt.title("Expenses by month")
    ax.set_ylim(0,270000)
    ax.plot(monthly_expenses, "-o", label = "billings by month")
    ax.plot(avg_monthly_expenses_by_year.tshift(-365, freq = "D").asfreq("D", method = "ffill"),
             "o",markersize = 3,
            label = "average monthly expenses by year")
    ax.legend()
# If we group by month, we'll get an overview of what average expense is 
    # associated with a given month
    
by_month = monthly_expenses.groupby(monthly_expenses.index.month).mean()
# monthly_expenses.groupby(monthly_expenses.index.month).sum() # checks
# monthly_expenses.groupby(monthly_expenses.index.month).count() # checks

with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    plt.title("Average monthly expenditure, 2012-2018")
    #ax.plot(monthly_expenses)
    ax.bar(np.arange(1, 13), by_month)
    
#### Now, let's dig in to how our suppliers have charged us over time. ################
    # What costs are increasing?

# What suppliers did we pay the most to?
supplier_sum = expenses.groupby(expenses["Levnamn"])["Betalt_belopp"].sum()

# Top n suppliers visualised:
with plt.style.context('ggplot'):
    n = 15
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    plt.title("Expenditure by supplier")
    #ax.plot(monthly_expenses)
    ax.bar(supplier_sum.nlargest(n).index, supplier_sum.nlargest(n))

top_suppliers = supplier_sum.nlargest(8)
by_supplier = expenses.groupby([expenses["Levnamn"], expenses.index.year])["Betalt_belopp"].sum()

# Change over time
with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    for supplier in top_suppliers.index:
        ax.plot(by_supplier.loc[supplier], "-o", label = supplier)
    ax.legend()

# What are the costs for 2018?
with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    ax.bar(by_supplier[:, 2018].index, by_supplier[:, 2018])
    ax.legend()

# Let's zoom in on 2018 to see what caused the slowdown in cash ackumulation:
expenses_18 = expenses["2018"]

by_supplier_18 = expenses_18.groupby([expenses_18["Levnamn"], expenses_18.index.month])["Betalt_belopp"].sum()

with plt.style.context('ggplot'):
    fig = plt.figure()
    ax = plt.axes()
    plt.xticks(rotation = 90)
    for supplier in top_suppliers.index:
        ax.plot(by_supplier_18.loc[supplier], "-o", label = supplier)
    ax.legend()
